import 'dart:convert';
import 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:timeago/timeago.dart' as timeago;
import 'lat_lng.dart';
import 'place.dart';
import 'uploaded_file.dart';
import '/backend/backend.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '/backend/supabase/supabase.dart';
import '/auth/supabase_auth/auth_util.dart';

String formatDateString(String? dateString) {
  if (dateString == null || dateString.isEmpty) {
    return 'Brak';
  }
  try {
    final DateTime parsedDate = DateTime.parse(dateString);
    final DateFormat formatter = DateFormat('dd MMMM yyyy', 'pl_PL');
    return formatter.format(parsedDate);
  } catch (e) {
    return 'B≈Çƒôdna data';
  }
}

List<dynamic> filterOwnerFromList(List<dynamic> memberList) {
  {
    if (memberList == null) {
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏—à–µ–ª null
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    List<dynamic> filteredList = [];

    for (var member in memberList) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ - –Ω–µ 'owner'
      if (member['role'] != 'owner') {
        filteredList.add(member);
      }
    }

    return filteredList;
  }
}

List<dynamic>? jsonToListAllegro(dynamic inputData) {
  if (inputData == null) {
    return [];
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å–ø–∏—Å–∫–æ–º. –ï—Å–ª–∏ –¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ.
  if (inputData is List) {
    return inputData;
  }

  // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏–¥–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
  return [];
}

bool? isMyMessage(String? authorRole) {
  bool isMyMessage(String? authorRole) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç true, –µ—Å–ª–∏ —Ä–æ–ª—å - SELLER
    // –∏ false –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ.
    if (authorRole == 'SELLER') {
      return true;
    } else {
      return false;
    }
  }
}

bool? hasPermission(
  int? accountId,
  List<int>? permissionIds,
) {
  {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ, –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (accountId == null || permissionIds == null) {
      return false;
    }
    return permissionIds.contains(accountId);
  }
}

bool? isIdInList(
  List<int>? idList,
  int? currentId,
) {
  {
    // Safety checks
    if (idList == null || currentId == null) {
      return false;
    }
    return idList.contains(currentId);
  }
}

bool? isPermissionListEmpty(dynamic apiResponse) {
  if (apiResponse == null || apiResponse['data'] == null) {
    return true;
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 'data' —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∏ —á—Ç–æ –æ–Ω –ø—É—Å—Ç
  if (apiResponse['data'] is List) {
    return (apiResponse['data'] as List).isEmpty;
  }
  // –ï—Å–ª–∏ 'data' –Ω–µ —Å–ø–∏—Å–æ–∫, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  return true;
}

String getFileName(FFUploadedFile uploadedFile) {
  {
    return uploadedFile?.name ?? '';
  }
}

int getFileSize(FFUploadedFile uploadedFile) {
  return uploadedFile?.bytes?.length ?? 0;
}

dynamic findMessageWithContext(List<dynamic> messagesList) {
  {
    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º.
    if (messagesList == null || messagesList.isEmpty) {
      return null;
    }

    // –ò–¥–µ–º –ø–æ —Å–ø–∏—Å–∫—É –í –û–ë–†–ê–¢–ù–û–ú –ü–û–†–Ø–î–ö–ï (–æ—Ç —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –∫ —Å—Ç–∞—Ä—ã–º).
    for (final item in messagesList) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –∫–∞—Ä—Ç–∞ (–æ–±—ä–µ–∫—Ç JSON).
      if (item is Map<String, dynamic>) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–º –∫–ª—é—á 'relatesTo'.
        if (item.containsKey('relatesTo') &&
            item['relatesTo'] is Map<String, dynamic>) {
          final relatesTo = item['relatesTo'] as Map<String, dynamic>;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–Ω—É—Ç—Ä–∏ 'relatesTo' –∫–ª—é—á 'offer' –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π.
          if (relatesTo.containsKey('offer') && relatesTo['offer'] != null) {
            // –ù–∞—à–ª–∏ —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            return item;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–Ω—É—Ç—Ä–∏ 'relatesTo' –∫–ª—é—á 'order' –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π.
          if (relatesTo.containsKey('order') && relatesTo['order'] != null) {
            // –ù–∞—à–ª–∏ —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ! –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            return item;
          }
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null.
    return null;
  }
}

dynamic getFirstMessageFromList(List<dynamic> messagesList) {
  {
    // Returns the last item from the list, which is the first message chronologically.
    if (messagesList == null || messagesList.isEmpty) {
      return null;
    }
    return messagesList.last;
  }
}

String? buildOfferUrl(
  String? marketplaceId,
  String? offerId,
) {
  {
    String domain = "allegro.pl"; // –î–æ–º–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    String path = "oferta"; // –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (marketplaceId == "allegro-cz") {
      domain = "allegro.cz";
      path = "nabidka";
    } else if (marketplaceId == "allegro-sk") {
      domain = "allegro.sk";
      path = "ponuka";
    } else if (marketplaceId == "allegro-hu") {
      // üëá –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –í–ï–ù–ì–†–ò–ò
      domain = "allegro.hu";
      path = "ajanlat";
    }
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ä—ã–Ω–∫–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏

    return "https://$domain/$path/$offerId";
  }
}

String translateStatusToPolish(String? status) {
  if (status == null || status.isEmpty) {
    return 'Nieznany';
  }

  // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
  final statusTranslations = {
    'NEW': 'Nowe',
    'PROCESSING': 'W realizacji',
    'READY_FOR_SHIPMENT': 'Gotowe do wysy≈Çki',
    'READY_FOR_PICKUP': 'Gotowe do odbioru',
    'SENT': 'Wys≈Çane',
    'PICKED_UP': 'Odebrane',
    'CANCELLED': 'Anulowane',
    'SUSPENDED': 'Wstrzymane',
    'RETURNED': 'Zwr√≥cone',
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è
    'READY_FOR_PROCESSING': 'Do realizacji'
  };

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç
  return statusTranslations[status] ?? status;
}

List<dynamic> parseMessages(dynamic apiResponseBody) {
  {
    // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç.
    // –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ –ø–∞—Ä—Å–∏—Ç—å, –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º.
    try {
      if (apiResponseBody == null) {
        return [];
      }

      // –ù–∞–ø—Ä—è–º—É—é –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á–∞–º, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ.
      final messages = apiResponseBody['data']['messages'];

      if (messages is List) {
        return messages;
      }

      return [];
    } catch (e) {
      print('Error accessing messages from JSON object: $e');
      return [];
    }
  }
}

String? formatDateStringAnswer(String dateString) {
  if (dateString == null || dateString.isEmpty) {
    return 'Brak';
  }
  try {
    // –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ timezone info
    String localDateString =
        dateString.replaceAll(RegExp(r'[+\-]\d{2}:\d{2}$'), '');
    final DateTime parsedDate = DateTime.parse(localDateString);
    final DateFormat formatter = DateFormat('dd.MM.yyyy HH:mm', 'pl_PL');
    return formatter.format(parsedDate);
  } catch (e) {
    return 'B≈Çƒôdna data';
  }
}
